# Generated by Django 5.0.2 on 2025-08-15 15:07

# Generated by Django 5.0.2 on 2025-08-15 13:20

from django.db import migrations


def create_default_action_types(apps, schema_editor):
    ActionType = apps.get_model('api', 'ActionType')
    types = [
        {"code": "created", "label": "Utworzono"},
        {"code": "rejected", "label": "Odrzucono"},
        {"code": "updated", "label": "Zaktualizowano"},
    ]
    for type in types:
        ActionType.objects.get_or_create(**type)


def create_default_complaint_decisions(apps, schema_editor):
    ComplaintDecision = apps.get_model('api', 'ComplaintDecision')
    decisions = [
        {"code": "correction", "label": "Korekta"},
        {"code": "rejection", "label": "Odrzucenie"},
        {"code": "exchange", "label": "Wymiana"},
        {"code": "return_item", "label": "Dosłanie towaru"},
        {"code": "return_element", "label": "Dosłanie elementu"},
    ]
    for decision in decisions:
        ComplaintDecision.objects.get_or_create(**decision)


def create_default_complaint_types(apps, schema_editor):
    ComplaintType = apps.get_model('api', 'ComplaintType')
    types = [
        {"code": "guarantee", "label": "Gwarancja"},
        {"code": "warranty", "label": "Rękojmia"},
    ]
    for type in types:
        ComplaintType.objects.get_or_create(**type)


def create_default_registration_units(apps, schema_editor):
    RegistrationUnit = apps.get_model('api', 'RegistrationUnit')
    units = [
        {"code": "meter_linear", "label": "Metr bieżący"},
        {"code": "meter_square", "label": "Metr kwadratowy"},
        {"code": "meter_cubic", "label": "Metr sześcienny"},
        {"code": "piece", "label": "Sztuka"},
    ]
    for unit in units:
        RegistrationUnit.objects.get_or_create(**unit)


def remove_specific_registration_units(apps, schema_editor):
    RegistrationUnit = apps.get_model('api', 'RegistrationUnit')

    # Remove units based on their 'code'
    codes_to_remove = ["unit"]
    RegistrationUnit.objects.filter(code__in=codes_to_remove).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0011_create_complaint_status_model"),
    ]

    operations = [
        migrations.RunPython(create_default_action_types),
        migrations.RunPython(create_default_complaint_decisions),
        migrations.RunPython(create_default_complaint_types),
        migrations.RunPython(create_default_registration_units),
        migrations.RunPython(remove_specific_registration_units),
    ]
